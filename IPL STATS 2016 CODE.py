# -*- coding: utf-8 -*-
"""FILE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kT23N04DdKNZPSIx8s0WW6nQT0bepMc9
"""

import pandas as pd
import numpy as np
import gradio as gr

!pip install -q pandas gradio transformers sentence-transformers
from transformers import pipeline

df=pd.read_csv("ipl2016.csv")
df

def text(row):
    return f"{row['Player']} scored {row['Runs']} runs off {row['BF']} balls, with a strike rate of {row['SR']},with a high score of {row['HS']}, with an average {row['Avg']} , scored {row['100']} centuries and {row['50']} half centuries."
text_chunk=df.apply(text,axis=1).tolist()

from sentence_transformers import SentenceTransformer
embed_model = SentenceTransformer("all-MiniLM-L6-v2")
embeddings = embed_model.encode(text_chunk)

from sklearn.metrics.pairwise import cosine_similarity
qa_model = pipeline("question-answering", model="bert-large-uncased-whole-word-masking-finetuned-squad")
def get_query(query, texts=text_chunk, top=15):
    query_embed = embed_model.encode([query])
    sims = cosine_similarity(embeddings, query_embed).flatten()
    top_indices = sims.argsort()[-top:][::-1]
    return [texts[i] for i in top_indices]

qa_model = pipeline("text2text-generation", model="google/flan-t5-base")
def rag(question,context):
    prompt = f"Answer the question based on the given context.\n\nContext:\n{context}\n\nQuestion: {question}"
    answer=qa_model(prompt,max_length=150,do_sample=False)
    return answer[0]['generated_text']

def set_query(question):
    q_lower = question.lower()
    players = [p for p in df['Player'] if p.lower() in q_lower]
    if len(players) >= 2:
        p1_stats = df[df['Player'] == players[0]].iloc[0]
        p2_stats = df[df['Player'] == players[1]].iloc[0]

        if any(word in q_lower for word in ["average", "avg"]):
            if p1_stats['Avg'] == p2_stats['Avg']:
                return (f"{players[0]} average: {p1_stats['Avg']}, "
                        f"{players[1]} average: {p2_stats['Avg']}. "
                        f"Both have equal average.")
            higher = players[0] if p1_stats['Avg'] > p2_stats['Avg'] else players[1]
            return (f"{players[0]} average: {p1_stats['Avg']}, "
                    f"{players[1]} average: {p2_stats['Avg']}. "
                    f"{higher} has higher average.")

        if any(word in q_lower for word in ["high score", "highest score", "hs"]):
            p1_score = int(str(p1_stats['HS']).rstrip('*'))
            p2_score = int(str(p2_stats['HS']).rstrip('*'))
            if p1_score == p2_score:
                return (f"{players[0]} high score: {p1_stats['HS']}, "
                        f"{players[1]} high score: {p2_stats['HS']}. "
                        f"Both have equal high scores.")
            higher = players[0] if p1_score > p2_score else players[1]
            return (f"{players[0]} high score: {p1_stats['HS']}, "
                    f"{players[1]} high score: {p2_stats['HS']}. "
                    f"{higher} has higher high score.")

        if any(word in q_lower for word in ["strike rate", "sr"]):
            if p1_stats['SR'] == p2_stats['SR']:
                return (f"{players[0]} strike rate: {p1_stats['SR']}, "
                        f"{players[1]} strike rate: {p2_stats['SR']}. "
                        f"Both have equal strike rates.")
            higher = players[0] if p1_stats['SR'] > p2_stats['SR'] else players[1]
            return (f"{players[0]} strike rate: {p1_stats['SR']}, "
                    f"{players[1]} strike rate: {p2_stats['SR']}. "
                    f"{higher} has higher strike rate.")

        if any(word in q_lower for word in ["centuries", "100s","most centuries","most 100s","most hundreds"]):
            if p1_stats['100'] == p2_stats['100']:
                return (f"{players[0]} centuries: {p1_stats['100']}, "
                        f"{players[1]} centuries: {p2_stats['100']}. "
                        f"Both have equal centuries.")
            higher = players[0] if p1_stats['100'] > p2_stats['100'] else players[1]
            return (f"{players[0]} centuries: {p1_stats['100']}, "
                    f"{players[1]} centuries: {p2_stats['100']}. "
                    f"{higher} has higher centuries.")

        if any(word in q_lower for word in ["half centuries", "50s","most half centuries","most 50s","most hundreds"]):
            if p1_stats['50'] == p2_stats['50']:
                return (f"{players[0]} half centuries: {p1_stats['50']}, "
                        f"{players[1]} half centuries: {p2_stats['50']}. "
                        f"Both have equal half centuries.")
            higher = players[0] if p1_stats['50'] > p2_stats['50'] else players[1]
            return (f"{players[0]} half centuries: {p1_stats['50']}, "
                    f"{players[1]} half centuries: {p2_stats['50']}. "
                    f"{higher} has higher half centuries.")
    if "highest average" in q_lower:
        row = df.loc[df['Avg'].idxmax()]
        return f"{row['Player']} has the highest average."
    if "lowest average" in q_lower:
        row = df.loc[df['Avg'].idxmin()]
        return f"{row['Player']} has the lowest average."
    if "highest high score" in q_lower:
        row = df.loc[df['HS'].apply(lambda x: int(str(x).rstrip('*'))).idxmax()]
        return f"{row['Player']} has the highest high score."
    if "lowest high score" in q_lower:
        row = df.loc[df['HS'].apply(lambda x: int(str(x).rstrip('*'))).idxmin()]
        return f"{row['Player']} has the lowest high score."
    if "highest strike rate" in q_lower:
        row = df.loc[df['SR'].idxmax()]
        return f"{row['Player']} has the highest strike rate."
    if "lowest strike rate" in q_lower:
        row = df.loc[df['SR'].idxmin()]
        return f"{row['Player']} has the lowest strike rate."
    if any(word in q_lower for word in ["highest centuries", "most hundreds", "most 100s","most centuries"]):
        row = df.loc[df['100'].idxmax()]
        return f"{row['Player']} has the highest number of centuries."
    if any(word in q_lower for word in ["least centuries", "least hundreds", "least 100s"]):
        row = df.loc[df['100'].idxmin()]
        return f"{row['Player']} has the lowest number of centuries."
    if any(word in q_lower for word in ["highest half centuries", "most half centuries", "most 50s"]):
        row = df.loc[df['50'].idxmax()]
        return f"{row['Player']} has the highest number of half centuries."
    if any(word in q_lower for word in ["least half centuries", "lowest half centuries", "least 50s"]):
        row = df.loc[df['50'].idxmin()]
        return f"{row['Player']} has the lowest number of half centuries."
    if "highest runs" in q_lower:
        row = df.loc[df['Runs'].idxmax()]
        return f"{row['Player']} has the highest number of runs."
    if "lowest runs" in q_lower:
        row = df.loc[df['Runs'].idxmin()]
        return f"{row['Player']} has the lowest number of runs."
    if "highest balls faced" in q_lower:
        row = df.loc[df['BF'].idxmax()]
        return f"{row['Player']} has the highest number of balls faced."
    if "lowest balls faced" in q_lower:
        row = df.loc[df['BF'].idxmin()]
        return f"{row['Player']} has the lowest number of balls faced."
    if "highest economy" in q_lower:
        row = df.loc[df['Econ'].idxmax()]
        return f"{row['Player']} has the highest economy."
    if "lowest economy" in q_lower:
        row = df.loc[df['Econ'].idxmin()]
        return f"{row['Player']} has the lowest economy."
    if "most balls" in q_lower:
        row = df.loc[df['Balls'].idxmax()]
        return f"{row['Player']} has the most balls."
    if "least balls" in q_lower:
        row = df.loc[df['Balls'].idxmin()]
        return f"{row['Player']} has the least balls."
    result = get_query(question)
    context = "\n".join(result)
    try:
        answer = qa_model(question=question, context=context)
        return answer.get("answer", "Sorry, couldn't find an answer.")
    except Exception:
        return "Sorry, I couldn't find an answer."

demo = gr.Interface(
    fn=set_query,
    inputs="text",
    outputs="text",
    title="IPL 2016 Batting Stats Q&A",
    description="Ask anything about player performances in IPL 2016."
)

demo.launch()

